- name: prepare some dirs
  file: name={{ item }} state=directory
  with_items:
  - "{{ cluster_dir }}/ssl"
  - "{{ cluster_dir }}/backup"
  - "{{ cluster_dir }}/yml"
  - "~/.kube"

- name: set extra-bin directory permission
  file: path={{ base_dir }}/bin state=directory mode=0755 recurse=yes

# register p variable,  p stat indicates whether ca cert was generated, if not, generate ca cert
# if ca cert exists, skip generating ca cert, guaranteeing idempotence
- name: read ca cert stat information into p
  stat: path="{{ cluster_dir }}/ssl/ca.pem"
  register: p
  tags: force_change_certs

- name: prepare ca configuration and cert request
  template: src={{ item }}.j2 dest={{ cluster_dir }}/ssl/{{ item }}
  with_items:
  - "ca-config.json"
  - "ca-csr.json"
  when: "p.stat.isreg is not defined or CHANGE_CA|bool"
  tags: force_change_certs

- name: generate CA cert and private key
  when: "p.stat.isreg is not defined or CHANGE_CA|bool"
  tags: force_change_certs
  shell: "cd {{ cluster_dir }}/ssl && \
	 {{ base_dir }}/extra-bin/cfssl gencert -initca ca-csr.json | {{ base_dir }}/extra-bin/cfssljson -bare ca"

# create kubectl configuration(kubectl.kubeconfig)
- import_tasks: create-kubectl-kubeconfig.yml
  tags: create_kctl_cfg, force_change_certs

# create customized client configuration
- import_tasks: add-custom-kubectl-kubeconfig.yml
  tags: add-kcfg, force_change_certs
  when: "ADD_KCFG|bool"

# create kube-proxy configuration(kube-proxy.kubeconfig)
- import_tasks: create-kube-proxy-kubeconfig.yml
  tags: force_change_certs

# create kube-controller-manager configuration(kube-controller-manager.kubeconfig)
- import_tasks: create-kube-controller-manager-kubeconfig.yml
  tags: force_change_certs

# create kube-scheduler configuration(kube-scheduler.kubeconfig)
- import_tasks: create-kube-scheduler-kubeconfig.yml
  tags: force_change_certs
