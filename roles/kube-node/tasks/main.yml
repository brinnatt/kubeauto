- name: create kube_node related directories
  file: name={{ item }} state=directory
  with_items:
  - /var/lib/kubelet
  - /var/lib/kube-proxy
  - /etc/cni/net.d
  - /opt/cni/bin

- name: download kubelet,kube-proxy binaries
  copy: src={{ base_dir }}/kube-bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
  with_items:
  - kubectl
  - kubelet
  - kube-proxy
  tags: upgrade_k8s

- name: download cni plugins binaries
  copy: src={{ item }} dest=/opt/cni/bin/ mode=0755
  with_fileglob:
  - "{{ base_dir }}/extra-bin/cni-bin/*"

- name: kubectl bash completion
  lineinfile:
    dest: ~/.bashrc
    state: present
    regexp: 'kubectl completion'
    line: 'source <(kubectl completion bash) # flag by kubeauto'

# ----------kubelet part--------------
# create kubelet cert and kubelet.kubeconfig
- import_tasks: create-kubelet-kubeconfig.yml
  tags: force_change_certs

- name: prepare cni configuration file
  template: src=cni-default.conf.j2 dest=/etc/cni/net.d/10-default.conf

- name: create kubelet configuration file
  template: src=kubelet-config.yaml.j2 dest=/var/lib/kubelet/config.yaml
  tags: upgrade_k8s, restart_node

- name: check if /run/systemd/resolve/resolv.conf exists
  stat: path="/run/systemd/resolve/resolv.conf"
  register: resolv
  tags: upgrade_k8s, restart_node

- name: replace resolvConf param
  lineinfile:
    dest: /var/lib/kubelet/config.yaml
    state: present
    regexp: 'resolvConf'
    line: 'resolvConf: /run/systemd/resolve/resolv.conf'
  when: "resolv.stat.isreg is defined"
  tags: upgrade_k8s, restart_node

- name: create kubelet systemd unit file
  template: src=kubelet.service.j2 dest=/etc/systemd/system/kubelet.service
  tags: upgrade_k8s, restart_node

- name: enable kubelet service on startup
  shell: systemctl enable kubelet
  ignore_errors: true

- name: start kubelet service
  shell: systemctl daemon-reload && systemctl restart kubelet
  tags: upgrade_k8s, restart_node, force_change_certs

#-------kube-proxy part----------------
- name: distribute kube-proxy.kubeconfig configuration file
  copy: src={{ cluster_dir }}/kube-proxy.kubeconfig dest=/etc/kubernetes/kube-proxy.kubeconfig
  tags: force_change_certs

- name: correct apiserver socket in kube-proxy.kubeconfig
  lineinfile:
    dest: /etc/kubernetes/kube-proxy.kubeconfig
    regexp: "^    server"
    line: "    server: {{ KUBE_APISERVER }}"
  tags: force_change_certs

- name: create kube-proxy configuration
  template: src=kube-proxy-config.yaml.j2 dest=/var/lib/kube-proxy/kube-proxy-config.yaml
  tags: reload-kube-proxy, restart_node, upgrade_k8s

- name: create kube-proxy service file
  template: src=kube-proxy.service.j2 dest=/etc/systemd/system/kube-proxy.service
  tags: reload-kube-proxy, restart_node, upgrade_k8s

- name: enable kube-proxy service on startup
  shell: systemctl enable kube-proxy
  ignore_errors: true

- name: start kube-proxy service
  shell: systemctl daemon-reload && systemctl restart kube-proxy
  tags: reload-kube-proxy, upgrade_k8s, restart_node, force_change_certs

- name: wait for kube-proxy running
  shell: "systemctl is-active kube-proxy.service"
  register: kubeproxy_status
  until: '"active" in kubeproxy_status.stdout'
  retries: 4
  delay: 2
  tags: reload-kube-proxy, upgrade_k8s, restart_node, force_change_certs

- name: wait for kubelet running
  shell: "systemctl is-active kubelet.service"
  register: kubelet_status
  until: '"active" in kubelet_status.stdout'
  retries: 4
  delay: 2
  tags: reload-kube-proxy, upgrade_k8s, restart_node, force_change_certs

- name: wait for node Ready
  shell: "kubectl get node {{ K8S_NODENAME }}|awk 'NR>1{print $2}'"
  register: node_status
  until: node_status.stdout == "Ready" or node_status.stdout == "Ready,SchedulingDisabled"
  retries: 8 
  delay: 8
  tags: upgrade_k8s, restart_node, force_change_certs
  connection: local

- block:
  - name: Setting worker role name
    shell: "kubectl label node {{ K8S_NODENAME }} kubernetes.io/role=node --overwrite"

  - name: Setting master role name
    shell: "kubectl label node {{ K8S_NODENAME }} kubernetes.io/role=master --overwrite"
    when: "inventory_hostname in groups['kube_master']"

  - name: Making master nodes SchedulingDisabled
    shell: "kubectl cordon {{ K8S_NODENAME }} "
    when: "inventory_hostname not in groups['kube_node']"
  ignore_errors: true
  connection: local
