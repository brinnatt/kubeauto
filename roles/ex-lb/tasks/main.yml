# automatically set LB node variable 'LB_IF'
- name: register variable LB_IF_TMP
  shell: "ip a|grep '{{ inventory_hostname }}/'|awk '{print $NF}'"
  register: LB_IF_TMP
  tags: restart_lb

- name: set variable LB_IF
  set_fact: LB_IF={{ LB_IF_TMP.stdout }}
  tags: restart_lb

- name: prepare some dirs
  file: name={{ item }} state=directory
  with_items:
  - "/etc/l4lb/sbin"
  - "/etc/l4lb/logs"
  - "/etc/l4lb/conf"
  - "/etc/keepalived"

- name: download binary l4lb(nginx)
  copy: src={{ base_dir }}/extra-bin/nginx dest=/etc/l4lb/sbin/l4lb mode=0755

- name: create l4lb configuration file
  template: src=l4lb.conf.j2 dest=/etc/l4lb/conf/l4lb.conf
  tags: restart_lb

- name: create l4lb systemd unit file
  template: src=l4lb.service.j2 dest=/etc/systemd/system/l4lb.service
  tags: restart_lb

- name: enable l4lb service on startup
  shell: systemctl enable l4lb
  ignore_errors: true

- name: start l4lb service
  shell: systemctl daemon-reload && systemctl restart l4lb
  ignore_errors: true
  tags: restart_lb

- name: wait for l4lb sevice running in a polling manner
  shell: "systemctl is-active l4lb.service"
  register: svc_status
  until: '"active" in svc_status.stdout'
  retries: 3
  delay: 3
  tags: restart_lb


- name: download binary keepalived
  copy: src={{ base_dir }}/extra-bin/keepalived dest=/usr/local/sbin/keepalived mode=0755

- name: configure keepalived master node
  template: src=keepalived-master.conf.j2 dest=/etc/keepalived/keepalived.conf
  when: LB_ROLE == "master"
  tags: restart_lb

- name: configure keepalived backup node
  template: src=keepalived-backup.conf.j2 dest=/etc/keepalived/keepalived.conf
  when: LB_ROLE == "backup"
  tags: restart_lb

- name: create keepalived systemd unit file
  template: src=keepalived.service.j2 dest=/etc/systemd/system/keepalived.service
  tags: restart_lb

- name: enable keepalived service on startup
  shell: systemctl enable keepalived
  ignore_errors: true

- name: start keepalived service
  shell: systemctl daemon-reload && systemctl restart keepalived
  ignore_errors: true
  tags: restart_lb

- name: wait for keepalived service running in a polling manner
  shell: "systemctl is-active keepalived.service"
  register: svc_status
  until: '"active" in svc_status.stdout'
  retries: 3
  delay: 3
  tags: restart_lb

- name: check if kube-apiserver under the ex-lb is alive
  uri:
    url: "https://{{ EX_APISERVER_VIP }}:{{ EX_APISERVER_PORT }}"
    validate_certs: no
    client_cert: "{{ cluster_dir }}/ssl/admin.pem"
    client_key: "{{ cluster_dir }}/ssl/admin-key.pem"
  register: result
  until: result.status == 200
  retries: 2
  delay: 5
  run_once: true
  connection: local

# - debug: var="result"